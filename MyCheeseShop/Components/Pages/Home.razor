@using MyCheeseShop.Components.Shared
@using MyCheeseShop.Context
@using MyCheeseShop.Model
@page "/"
@inject CheeseProvider CheeseProvider
@inject ShoppingCart ShoppingCart
@inject NavigationManager NavigationManager


<PageTitle>MyCheeseShop - The World's Best Cheeses!</PageTitle>


<div class="d-flex justify-content-end mt-2 mt-md-0">
    <a @onclick="GoToCart" class="btn btn-outline-dark"> 🛍️ Cart (@ShoppingCart.Count()) </a>
</div>


<div class="row">
@foreach (var cheese in cheeses)
{
    <div class="col-md-3">
        <StoreItem Cheese="cheese"/> 
    </div>
}
</div>

<div class="row">
@foreach (var cheese in cheeses)
{
   <div class="col-md-3">
         <StoreItem Cheese="cheese" />
   </div>
}
@if (!FilteredCheeses.Any())
    {
        <p> No cheese found. </p>
    }
</div>


@code {
    private IEnumerable<Cheese> cheeses;
    private string searchTerm = "";

    private IEnumerable<Cheese> filteredCheeses;
    private IEnumerable<Cheese> FilteredCheeses
    {
        get
        {
            return filteredCheeses.Where(GetSearchCriteria);
        }
        set
        {
            filteredCheeses = value; 
        }
    }

    protected override async Task OnInitializedAsync()
    {
        cheeses = await CheeseProvider.GetAllCheesesAsync();
        filteredCheeses = cheeses;
        ShoppingCart.OnCartUpdated += StateHasChanged;

    }

    private void GoToCart()
    {
        NavigationManager.NavigateTo("/cart");
    }

    private bool GetSearchCriteria(Cheese cheese)
    {
        if (string.IsNullOrWhiteSpace(searchTerm)) return true;

        return cheese.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
              || cheese.Type.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
              || cheese.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
              || cheese.Strength.Contains(searchTerm, StringComparison.OrdinalIgnoreCase);

    }

    
 }

